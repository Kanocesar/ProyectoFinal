#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <mysql.h>
#include <pthread.h>


typedef struct 
{	
	char nombre[20];
	int socket;
	
}TConectado;

typedef struct {
	
	TConectado conectados[100];
	int num; 
	
}TListaCon;


TListaCon lista;
int i;
int sockets[100];
char cadenafinal[200];


//Login
int LogIn(char nombre[20],char contra[20])
{
	MYSQL *conn;
	int err;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	char consulta[80];
	char res[80];
	//parte de mysql
	char nom[20], cnt[20]; //variables para comparar nombre y contraseña
	
	conn = mysql_init(NULL);
	
	if (conn==NULL) 
	{
		printf ("Error al crear la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);	
	}
	
	conn = mysql_real_connect (conn, "localhost","root","mysql","yonunca",0, NULL, 0);
	
	if (conn==NULL) 
	{
		printf	 ("Error al inicializar la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	strcpy(consulta,"SELECT Jugador.Nombre,Jugador.Pass FROM Jugador WHERE Jugador.Nombre = '");
	strcat(consulta, nombre);
	strcat(consulta, "'");
	printf(consulta);
	err=mysql_query (conn, consulta);
	
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	
	if (row == NULL) 
		printf ("No se han obtenido datos en la consulta\n");
	
	else
	{
		strcpy(nom,row[0]);
		strcpy(cnt,row[1]);
		
		printf("nombre recibido: %s, contra recibida: %s\n", nom, cnt);
		row = mysql_fetch_row (resultado);
	}
	
	if((strcmp(nom,nombre) == 0)  && (strcmp(cnt,contra) == 0))
	{
		return 0;
	}
	
	else
	   return 1;
	
		
}




void DameConectados (TListaCon *lista, char conectados[300])
{
	//Pone en conectados los nombres de todos los conectados separados por /.
	//Primero pone el numero de conectados. 
	//Ejemplo: "3/Charly/Cesar/Max"
	sprintf(conectados,"%d",lista->num);
	int i;
	for(i=0;i<lista->num;i++)
		sprintf(conectados, "%s/%s", conectados,lista->conectados[i].nombre);
}


int Eliminar ( TListaCon *lista, char nombre [20] )
{
	int pos = DamePosicion(&lista, nombre);
	printf("Nombre del que se va: %s\n", lista->conectados[pos].nombre);
	if(pos == -1)
	{
		return pos;
	}
	else{
		for(int i = pos; i<lista->num-1; i++)
		{
			lista->conectados[i].socket = lista->conectados[i+1].socket;
			//strcpy(lista->conectados[i].nombre, lista->conectados[i+1].nombre);
		}
		lista->num--;
		printf("Nombre del que se queda su posicion: %s\n", lista->conectados[pos].nombre);
		return 0;
	}
}
int DameSocket (TListaCon *lista, char nombre [20]) 
//Encuentra el socket el usuario requerido
{
	int encontrado = 0;
	int i = 0;
	
	while ((i < lista->num) && (!encontrado))
	{
		if (strcmp ( lista->conectados[i].nombre, nombre) ==0)
			encontrado = 1;
		else
			i++;
	}
	
	if (!encontrado)
		return lista->conectados[i].socket;
	else 
		return -1;
}

int Pon ( TListaCon *lista, char nombre [20], int socket)
//pone un usuario en la lista de conectados
{
	if(lista->num == 100) // ya hay 100 elementos
		return 0;
	else 
	{
		lista->conectados[lista->num].socket = socket;
		strcpy(lista->conectados[lista->num].nombre,nombre);
		lista->num ++;
		return 1; // todo ha ido bien
	}
}

int DamePosicion (TListaCon *lista, char nombre [20])
//da la psicion del usu en la lista de conectados
{
	int encontrado = 0;
	int i = 0;
	
	while ((i < lista->num) && (!encontrado))
	{
		if (strcmp ( lista->conectados[i].nombre, nombre) ==0)
			encontrado = 1;
		else
			i++;
	}
	
	if (!encontrado)
		return i;
	else 
		return -1;
}
void Cadena (TListaCon *lista, char cadenafinal [100])
//genera un string de usuarios
{
	char cadena[200];
	int cont=0;
	for (int i=0;i<lista->num;i++){
		printf("%s\n",lista->conectados[lista->num].nombre);
		sprintf (cadena,"%s\%s/",cadena,lista->conectados[i].nombre);
		cont ++;
	}
	sprintf(cadenafinal,"5/%d/%s", lista->num, cadena);
	printf("%s\n",cadenafinal);
}
void SelectPregunta (char p[80], char respuesta[200])
//Selecciona una pregunta al azar
{
	MYSQL *conn;
	int err;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	char consulta [80];
	char res [80];
	
	// arrancamos 
	p = strtok(NULL, "/");
	char pregunta[100];
	strcpy(pregunta,p);
	p=strtok(NULL,"/");
	// hacemos mysql
	printf("pregunta: %s\n", pregunta);
	
	conn = mysql_init(NULL);
	
	if (conn==NULL) 
	{
		printf ("Error al crear la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	conn = mysql_real_connect (conn, "localhost","root", "mysql", "yonunca",0, NULL, 0);
	if (conn==NULL) 
	{
		printf ("Error al inicializar la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	strcpy(consulta,"SELECT Preguntas.Pregunta FROM Preguntas WHERE Preguntas.Id= '");
	strcat(consulta, pregunta);
	strcat(consulta, "'");
	printf("Consulta: %s\n",consulta);
	err=mysql_query (conn, consulta);
	
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	resultado = mysql_store_result (conn);
	
	row = mysql_fetch_row (resultado);
	
	if (row == NULL) printf ("No se han obtenido datos en la consulta\n");
	else
	{
		sprintf(resultado ,"%s",row[0]);
		
		
	}		
	
	sprintf(respuesta,"3/%s",resultado);
	
}

void GanadorFecha (char p[80], char respuesta[200])
//da el ganador de la partida con la fecha seleccionada
{
	MYSQL *conn;
	int err;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	char consulta [80];
	char res [80];
	
	// arrancamos 
	p = strtok(NULL, "/");
	char fecha[20];
	strcpy(fecha,p);
	p=strtok(NULL,"/");
	// hacemos mysql
	printf("fecha: %s\n", fecha); //2022-07-21
	
	conn = mysql_init(NULL);
	
	if (conn==NULL) 
	{
		printf ("Error al crear la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	conn = mysql_real_connect (conn, "localhost","root", "mysql", "yonunca",0, NULL, 0);
	if (conn==NULL) 
	{
		printf ("Error al inicializar la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	strcpy(consulta,"SELECT Partida.Ganador FROM Partida WHERE Partida.Fecha='");
	strcat(consulta, fecha);
	strcat(consulta, "'");
	printf("Consulta: %s\n",consulta);
	err=mysql_query (conn, consulta);
	
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	resultado = mysql_store_result (conn);
	
	row = mysql_fetch_row (resultado);
	
	if (row == NULL) printf ("No se han obtenido datos en la consulta\n");
	else
	{
		sprintf(resultado ,"%s\n",row[0]);
		
	}		
	sprintf(respuesta,"2/%s\n",resultado);
}

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int contador;

int Registrar(char nombre[20],char contra[20])
//registra un usu en la bbdd
{
	MYSQL *conn;
	int err;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	char consulta[80];
	char res[80];
	int id;
	char newid[30];
	//parte de mysql
	char nom[20], cnt[20];
	
	conn = mysql_init(NULL);
	
	if (conn==NULL)
	{
		printf ("Error al crear la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);	
	}
	
	conn = mysql_real_connect (conn, "localhost","root","mysql","yonunca",0, NULL, 0);
	
	if (conn==NULL) 
	{
		printf	 ("Error al inicializar la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	strcpy(consulta,"SELECT MAX(Jugador.Id) FROM Jugador;");
	
	// hacemos la consulta 
	err=mysql_query (conn, consulta); 
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	//recogemos el resultado de la consulta 
	
	resultado = mysql_store_result (conn); 
	row = mysql_fetch_row (resultado);
	if (row == NULL)
	{
		printf ("No se han obtenido datos en la consulta\n");
		
	}
	
	id = 1 + atoi(row[0]);
	printf("Su id sera:%d \n", id);
	sprintf(newid,"%d",id);
	
	//sprintf(ID, "%d", IDnum);
	strcpy(consulta, "INSERT INTO Jugador VALUES (");
	strcat(consulta,newid);
	strcat(consulta,",'");
	strcat (consulta, nombre); 
	strcat (consulta, "'");
	strcat (consulta, ",'"); 
	strcat (consulta, contra); 
	strcat (consulta, "');");
	
	printf("Consulta = %s\n", consulta);
	
	err=mysql_query (conn, consulta);
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
}

	
	

	
/*
int DarDeBaja (char nombre[20],char contra[20])
/da de baja un usuario de la bbdd
{
	MYSQL *conn;
	int err;
	MYSQL_RES *resultado;
	MYSQL_ROW row;
	char consulta[80];
	char res[80];
	//parte de mysql
	char nom[20], cnt[20]; //variables para comparar nombre y contraseña
	
	conn = mysql_init(NULL);
	
	if (conn==NULL) 
	{
		printf ("Error al crear la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);	
	}
	
	conn = mysql_real_connect (conn, "localhost","root","mysql","yonunca",0, NULL, 0);
	
	if (conn==NULL) 
	{
		printf	 ("Error al inicializar la conexion: %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	
	strcpy(consulta,"DELETE FROM Jugador WHERE Jugador.Nombre = '");
	strcat(consulta, nombre);
	strcat(consulta, "';");
	
	printf(consulta);
	err=mysql_query (conn, consulta);
	
	if (err!=0) 
	{
		printf ("Error al consultar datos de la base %u %s\n", mysql_errno(conn), mysql_error(conn));
		exit (1);
	}
	resultado = mysql_store_result (conn);
	row = mysql_fetch_row (resultado);
	
	if (row == NULL)
	{
		printf ("No se han obtenido datos en la consulta\n");
		
	}
	
	else
		while (row !=NULL) 
	{
			printf ("nombre: %s\n", row[1]);
			row = mysql_fetch_row (resultado);
	}
		return 0;
	
	
}

*/
void *AtenderCliente(void *socket)
//atiende las peticiones
{	
	int sock_conn;
	int *s;
	s= (int *) socket;
	sock_conn= *s;
	char peticion[512];
	char respuesta[512];
	int ret;
	int res;
	int terminar=0;
	// Entramos en un bucle para atender todas las peticiones de este cliente
	
	char cadenafinal[200];
	int sockets[100];
	
	// Entramos en un bucle para atender todas las peticiones de este cliente
	//hasta que se desconecte
	while (terminar ==0)
	{
		char nombre2[30];
		char conectados[300];
		// Ahora recibimos la peticion
		ret=read(sock_conn,peticion, sizeof(peticion));
		printf ("Recibido\n");
		
		// Tenemos que a?adirle la marca de fin de string 
		// para que no escriba lo que hay despues en el buffer
		peticion[ret]='\0';
		
		
		printf ("Peticion: %s\n",peticion);
		// vamos a ver que quieren
		char *p = strtok( peticion, "/");
		int codigo =  atoi (p);
		// Ya tenemos el c?digo de la petici?n
		char nombre[20];
		
		if (codigo == 0) 
		{	
			close(sock_conn); 
			//Salimos del bucle
			terminar = 1;
			
		}
		if (codigo == 1) // consulta 1: nombre y contrase?a en la base de datos?
		{
			//arrancamos los atributos nombre y contra 
			p = strtok(NULL, "/");
			char nombre[20];
			strcpy (nombre, p);
			p = strtok(NULL, "/");
			char contra[20];
			strcpy (contra, p);
			printf ("Nombre: %s, Contra: %s\n", nombre, contra);
			
			res=LogIn(nombre,contra); 
			if (res==0)
				strcpy(respuesta,"1/SI"); 
			
			else
				strcpy(respuesta,"1/NO");
			
			//LogIn(p, respuesta); 
			if(strcmp(respuesta,"1/SI")==0)
			{
				res = Pon(&lista,nombre,sock_conn);
				
				if(res==1)
				{
					printf("Se ha a\F1adido correctamente");
					Cadena(&lista,cadenafinal);
					
				}
				else
				{
					printf("Lista llena!!\n");
				}
			}
		}
		if (codigo== 2) // consulta 2: ganador con esa fecha 
	    {
			GanadorFecha(p, respuesta);
			
		}
		if (codigo== 3) // consulta 3: dame pregunta 
	    {
			SelectPregunta(p, respuesta);
		}
		if (codigo==4)
		{
			p = strtok(NULL, "/");
			char nombre[20];
			strcpy (nombre, p);
			p = strtok(NULL, "/");
			char contra[20];
			strcpy (contra, p);
			printf ("Nombre: %s, Contra: %s\n", nombre, contra);
			
			res=Registrar(nombre,contra); 
			if (res==0)
				strcpy(respuesta,"4/SI"); 
			
			else
				strcpy(respuesta,"4/NO");
			
			//LogIn(p, respuesta); 
			if(strcmp(respuesta,"4/SI")==0)
			{
				res = Pon(&lista,nombre,sock_conn);
				
				if(res==1)
				{
					printf("Se ha a\F1adido correctamente");
					Cadena(&lista,cadenafinal);
					
				}
				else
				{
					printf("Lista llena!!\n");
				}
			}
		}
		if (codigo = 5)
//invita a partida
		{
			char invitado[20];
			p=strtok(NULL, "/");
			strcpy(invitado,p);
			
			p=strtok(NULL, "/");
			int nform = atoi(p);
			
			socket_invitado = DameSocket(&lista,invitado);
			sprintf(respuesta,"7-%s/%d", nombre, nform);
			write(socket_invitado, respuesta, strlen(respuesta));
		}
		if (codigo = 6)
//dice si ha acceptado la invitacion
		{
			char UserQInvito [20];
			p=strtok(NULL, "/");
			strcpy(UserQInvito,p);
			
			int acepta;
			p=strtok(NULL, "/");
			acepta = atoi(p);
			printf("%d",acepta);
			
			
			if (acepta == 0)
			{
				printf("Jugdor invitado es: %s, El que invita: %s \n",nombre, UserQInvito);
				socket_invitado = DameSocket(&lista,UserQInvito);
				sprintf(respuesta,"8-%s/0", nombre);
				write(socket_invitado, respuesta, strlen(respuesta));
				
				sprintf(respuesta2,"7-%s/%s", UserQInvito, nombre);
				write(socket_invitado, respuesta2, strlen(respuesta2));
				socket_jug1 = DameSocket(&lista,nombre);
				write(socket_jug1, respuesta2, strlen(respuesta2) );
				
			}
			else
			{
				socket_invitado = DameSocket(&lista,UserQInvito);
				sprintf(respuesta,"5-%s/1", nombre);
				write(socket_invitado, respuesta, strlen(respuesta));
			}
		}
		if (codigo = 7)
//utilizado para escribir en el chat
		{
			char respuesta[100];
			int j;
			//sprintf(texto,"6/%s",nombre);
			printf("Persona que escribe: %s\n",nombre);
			
			p = strtok (NULL,"/");
			char texto [30];
			strcpy (texto, p);
			
			sprintf(respuesta,"9/%s%s",nombre,texto);
			
			for(j=0;j<i; j++){
				write (sockets[j],respuesta,strlen(respuesta));
			}
		}
		
		
		
		if (codigo !=0)
	    {
			//printf ("Esta es la respuesta: %s\n", respuesta);
			//Enviamos respuesta
			write (sock_conn,respuesta, strlen(respuesta));
			
			//Enviamos notificaci\F3n
			printf ("Esta es la notificacion: %s\n", cadenafinal);
			for(int i=0;i<lista.num;i++)
			{
				write(sock_conn,cadenafinal, strlen(cadenafinal));					
			}
		}
		/*
		if ((codigo ==1)||(codigo==2)|| (codigo==3)|| (codigo==4)|| (codigo==5) || (codigo==8))
	    {
			pthread_mutex_lock( &mutex ); //No me interrumpas ahora
		    contador = contador +1;
			pthread_mutex_unlock( &mutex); //ya puedes interrumpirme
			// notificar a todos los clientes conectados
			char notificacion[20];
			sprintf (notificacion, "6/%d",cadenafinal);
			int j;
			for (j=0; j< i; j++)
				write (sockets[j],notificacion, strlen(notificacion));
		}
		*/
	}
	close(sock_conn); 
}

int main(int argc, char *argv[]) 
{
	int i;
	int sockets[100];
	char cadenafinal[200];
	
	lista.num = 0;
	int sock_conn, sock_listen, ret;
	struct sockaddr_in serv_adr;
	char peticion[512];
	char respuesta[512];
	// INICIALITZACIONS
	// Obrim el socket
	if ((sock_listen = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		printf("Error creant socket");
	// Fem el bind al port
	memset(&serv_adr, 0, sizeof(serv_adr));// inicialitza a zero serv_addr
	serv_adr.sin_family = AF_INET;
	// asocia el socket a cualquiera de las IP de la m?quina. 
	//htonl formatea el numero que recibe al formato necesario
	serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);
	// establecemos el puerto de escucha
	serv_adr.sin_port = htons(9050);
	if (bind(sock_listen, (struct sockaddr *) &serv_adr, sizeof(serv_adr)) < 0)
		printf ("Error al bind");
	if (listen(sock_listen, 3) < 0)
		printf("Error en el Listen");	
	
	pthread_t thread;
	i=0;
	for (;;)
	{
		printf ("Escuchando\n");
		sock_conn = accept(sock_listen, NULL, NULL);
		printf ("He recibido conexion\n");
		sockets[i] =sock_conn;
		//sock_conn es el socket que usaremos para este cliente
		
		// Crear thead y decirle lo que tiene que hacer
		
		pthread_create (&thread, NULL, AtenderCliente,&sockets[i]);
		i=i+1;
	}
}